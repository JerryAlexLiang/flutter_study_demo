// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_study_demo/model/wan_android_article_bean_entity.dart';
import 'package:flutter_study_demo/generated/json/wan_android_article_bean_entity_helper.dart';
import 'package:flutter_study_demo/model/demo_bean.dart';
import 'package:flutter_study_demo/generated/json/demo_bean_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case WanAndroidArticleBeanEntity:
				return wanAndroidArticleBeanEntityFromJson(data as WanAndroidArticleBeanEntity, json) as T;
			case WanAndroidArticleBeanData:
				return wanAndroidArticleBeanDataFromJson(data as WanAndroidArticleBeanData, json) as T;
			case WanAndroidArticleBeanDataData:
				return wanAndroidArticleBeanDataDataFromJson(data as WanAndroidArticleBeanDataData, json) as T;
			case DemoBean:
				return demoBeanFromJson(data as DemoBean, json) as T;
			case DemoBeanData:
				return demoBeanDataFromJson(data as DemoBeanData, json) as T;
			case DemoBeanDataDatas:
				return demoBeanDataDatasFromJson(data as DemoBeanDataDatas, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case WanAndroidArticleBeanEntity:
				return wanAndroidArticleBeanEntityToJson(data as WanAndroidArticleBeanEntity);
			case WanAndroidArticleBeanData:
				return wanAndroidArticleBeanDataToJson(data as WanAndroidArticleBeanData);
			case WanAndroidArticleBeanDataData:
				return wanAndroidArticleBeanDataDataToJson(data as WanAndroidArticleBeanDataData);
			case DemoBean:
				return demoBeanToJson(data as DemoBean);
			case DemoBeanData:
				return demoBeanDataToJson(data as DemoBeanData);
			case DemoBeanDataDatas:
				return demoBeanDataDatasToJson(data as DemoBeanDataDatas);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (WanAndroidArticleBeanEntity).toString()){
			return WanAndroidArticleBeanEntity().fromJson(json);
		}	else if(type == (WanAndroidArticleBeanData).toString()){
			return WanAndroidArticleBeanData().fromJson(json);
		}	else if(type == (WanAndroidArticleBeanDataData).toString()){
			return WanAndroidArticleBeanDataData().fromJson(json);
		}	else if(type == (DemoBean).toString()){
			return DemoBean().fromJson(json);
		}	else if(type == (DemoBeanData).toString()){
			return DemoBeanData().fromJson(json);
		}	else if(type == (DemoBeanDataDatas).toString()){
			return DemoBeanDataDatas().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<WanAndroidArticleBeanEntity>[] is M){
			return data.map<WanAndroidArticleBeanEntity>((e) => WanAndroidArticleBeanEntity().fromJson(e)).toList() as M;
		}	else if(<WanAndroidArticleBeanData>[] is M){
			return data.map<WanAndroidArticleBeanData>((e) => WanAndroidArticleBeanData().fromJson(e)).toList() as M;
		}	else if(<WanAndroidArticleBeanDataData>[] is M){
			return data.map<WanAndroidArticleBeanDataData>((e) => WanAndroidArticleBeanDataData().fromJson(e)).toList() as M;
		}	else if(<DemoBean>[] is M){
			return data.map<DemoBean>((e) => DemoBean().fromJson(e)).toList() as M;
		}	else if(<DemoBeanData>[] is M){
			return data.map<DemoBeanData>((e) => DemoBeanData().fromJson(e)).toList() as M;
		}	else if(<DemoBeanDataDatas>[] is M){
			return data.map<DemoBeanDataDatas>((e) => DemoBeanDataDatas().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}